diff --git a/docs/Developer/Java/java.md b/docs/Developer/Java/java.md
deleted file mode 100644
index e69de29..0000000
diff --git a/docs/Developer/Python/python.md b/docs/Developer/Python/python.md
index e69de29..fda3f4f 100644
--- a/docs/Developer/Python/python.md
+++ b/docs/Developer/Python/python.md
@@ -0,0 +1,121 @@
+# Python
+
+## I. Tổng quan
+
+Python trải qua nhiều phiên bản đã có python2 và python3. Mặc dù python2 mới là đỉnh cao đem lại sự phát triển lớn mạnh dành cho ngôn ngữ này nhưng qua thời gian python2 đã không còn phù hợp với nhiều công nghệ mới. Vì vậy nếu không thực sự phải làm việc với những hệ thống cao tuổi thì khuyến khích nên cài đặt python3 với nhiều hỗ trợ đầy đủ hơn và tốt hơn.
+
+## II. Cài đặt cho windows
+
+1. Tải tệp cài đặt Python trực tiếp từ [trang chủ](https://www.python.org/).
+    * ![alt text](img/python-0.png)
+1. Sau đó chỉ cần cài đặt. Ở bước này nếu không thông thạo thì cứ cài đặt như bình thường vào ổ Win(C:) không sao cả vì python khá là nhẹ. Nhưng nên chọn `Add python.exe to PATH` để có thể dùng các lệnh python ở `command console (cmd)`.
+    * ![alt text](img/python-1.png)
+1. Nếu không muốn gặp vấn đề với đường dẫn thì nên chọn lựa chọn này! Chủ yếu hệ thông Windows thi thoảng sẽ có đường dẫn rất rất dài do windows không hạn chế về dir-lenght + filename-length dựa trên số lượng `ascii` mà trên `số lượng ký tự`. Điều này nếu không mở ra có thể chạy code python sẽ lỗi. Còn nếu có thể bỏ được thì cũng tốt nếu bạn tự tin và khả năng quản lý và xử lý lỗi của mình.
+    * ![alt text](img/python-2.png)
+
+Vậy là xong rồi đó!
+
+## III. Cài đặt cho Ubuntu
+
+### Phiên bản tiêu chuẩn
+
+Ở Linux thì chỉ cần dùng lệnh `Terminal`.
+```bash
+sudo apt-get update
+sudo apt-get install python3
+```
+
+## Cài các phiên bản khác của Python
+
+Nhiều hệ thống cũ vẫn dùng Python phiên bản cũ cái mà theo thời gian không còn được hỗ trợ nữa. Nhưng vì dự án còn chạy nên đôi khi, có thể gọi là đôi khi sẽ cần Python cũ để chạy những chương trình đó. Cụ thể và trực tiếp nhất chính là giai đoạn bùng nổ của 
+
+### Nguồn tải
+
+Các phiên bản đã được xuất bản của python được tải lên ở đây [link](https://www.python.org/ftp/python/)
+
+### Windows
+
+Cài đặt cho windows rất dễ, chỉ cần chọn 1 phiên bản và chọn tệp dạng `.msi` hoặc `.exe` và cài đặt như bình thường.
+
+### Linux hoặc Ubuntu
+
+- Lựa chọn đúng phiên bản xem hướng dẫn tại (TO_DO)
+- Sau đó là tải gói cài đặt xuống, thường đuôi là `.tgz`. Tải xuống bằng trình duyệt web hoặc là chọn phiên bản và tải về với `wget`. Ví dụ với version 3.12.3:
+
+```
+wget https://www.python.org/ftp/python/3.12.3/Python-3.12.3.tgz
+```
+
+- Trước khi làm gì thì nên cập nhật hệ thống để tải các gói mới nhất về:
+
+```bash
+sudo apt install
+```
+
+- Xong rồi thì giải nén gói vừa cài
+
+```bash
+tar -xf Python-3.11.3.tgz
+```
+!!! warning "Chú ý"
+    Nếu chưa cài đặt các gói phụ thuộc dưới đây thì nên chạy lệnh dưới đây để cài đặt các gói cần thiết
+
+
+```bash
+sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev
+```
+- Rồi thì thực hiện các bước cài đặt, ví dụ với python 3.12.3
+
+```bash
+cd Python-3.12.3
+```
+
+- Cấu hình cài đặt
+
+```bash
+./configure --enable-optimizations
+```
+
+- Với cờ được thêm vào là:
+    - `--enable-optimizations` hữu ích và nên thêm
+    - `--with-ensurepip=install` có thể có hoặc không
+
+- Rồi cuối cùng là chạy `make` để build. Hoặc `make -j 4` nếu chỉ muốn chạy build trên 4 luồng để tiết kiệm tài nguyên cho các tác vụ khác
+
+```bash
+make
+```
+
+Hoặc
+
+```bash
+make -j 4
+```
+
+Vậy là hoàn thành bước cài đặt, cuối cùng là lựa chọn sử dụng gói `python2` hay `python3` nào bởi hầu hết các hệ thống đều có thể tồn tại 2 gói độc lập. Bạn cũng có thể dùng một trong 2 cách dưới đây để cài mặc định cho hệ thống là sử dụng `python3` thay vì `python2`.
+Chạy lệnh này nếu muốn cài đặt bản mới riêng biệt mà không phải là phiên bản nâng cấp của python cũ đã có trên máy.
+
+```bash
+sudo make altinstall
+```
+
+Dùng soft-link để gán tệp thực thi từ `python2` -> `python3`. Chuyển `python3` thành mặc định. Nói đơn giản, mỗi lần dùng `python` tức là `python3`
+
+```bash
+ln -s /usr/bin/python /usr/bin/python3.12.3
+```
+
+## Cài đặt biến môi trường
+
+Với hệ điều hành Windows thì đó gần như là điều bắt buộc vì các phần mềm hệ thống có vẻ chẳng bao giờ nằm gọn ở một chỗ, thế nên có một số cài đặt sau nên được thêm vào biến môi trường trên Windows. Các biến môi trường cần thêm là:
+
+```bash
+%USERPROFILE%\AppData\Local\Programs\Python\Python$\
+%USERPROFILE%\AppData\Local\Programs\Python\Python$\Scripts
+```
+
+_Thay `$` bằng phiên bản Python tương ứng_
+
+!!! warning "Lưu ý:"
+    - `Python313` là phiên bản python hiện tại sử dụng, sẽ thay đổi đường dẫn dựa trên phiên bản mà bạn cài đặt.
+    - Hai thư mục đó là chứa tệp `py.exe` và `pip.exe` (có thể là `py3.exe` hoặc `pip3.exe`)
\ No newline at end of file
diff --git a/docs/Developer/cpp/cpp-basic-operator.md b/docs/Developer/cpp/cpp-basic-operator.md
deleted file mode 100644
index bdb11d8..0000000
--- a/docs/Developer/cpp/cpp-basic-operator.md
+++ /dev/null
@@ -1,176 +0,0 @@
-# Basic Operator
-
-## Math Operator
-
-### Tóm tắt
-
-Các phép số học cơ bản bao gồm:
-- `+`: Cộng
-- `-`: Trừ
-- `*`: Nhân
-- `/`: Chia lấy nguyên
-- `%`: Chia lấy dư
-
-### Cộng, trừ và nhân
-
-Cộng và trừ sẽ về cơ bản là giống như cũ trừ việc nó có thể  bị vượt ngưỡng. Ví dụ, giới hạn của số `int` là `2147483647` nếu cộng quá thì sao?
-
-```c++
-int main()
-{
-	int i = 2147483647;
-	int over_int = i + 10;
-	cout << over_int;
-	return EXIT_SUCCESS;
-}
-```
-Kết quả:
-```bash
--2147483639
-```
-Đây là do tính chất quay vòng của số nên số `int` đã sai kết quả và quay vòng. Trong trường hợp này nên tăng thêm kích thước cho biến chẳng hạn dùng `long int`. Nhưng cái quan trọng cần đúc kết ở đây là:
-
-<div class="note-red">
-Khi thực hiện phép tính nên đảm bảo phạm vi giá trị của biến. Bởi khi quá ngưỡng sẽ không có thông báo nào đâu, việc này tự bản thân người lập trình cần phải nắm.
-</div>
-<br>
-
-Việc thực hiện phép nhân cũng tương tự nếu vượt quá kích thước sẽ xảy ra hiện tượng ___overflow___ như cũ.
-
-### Phép Chia
-
-Phép chia sẽ gồm 2 phép toán là <u>chia lấy nguyên</u> và <u>chia lấy dư</u>
-#### Phép chia lấy nguyên
-
-- Chia lấy nguyên tức là phép chi chỉ lấp phần nguyên. Ví dụ 5/2 được 2.5 nhưng phép chia không lấy phần thập phân mà chỉ lấy phần nguyên là `2`.
-- Phép chia lấy nguyên trở thành phép chia bình thường nếu sử dụng số thực, ví dụ như là kiểu `double`.
-
-```cpp
-int main()
-{
-	int i = 5;
-	float d = 5.0;
-	
-	cout << i / 2 << endl;
-	cout << d / 2.0 << endl;
-	return EXIT_SUCCESS;
-}
-```
-Kết quả:
-```bash
-2
-2.5
-```
-<div class="note-blue">
-
-Thực ra trong phép tính trên không nhất thiết khi dùng `float` phải để là `5.0`, hoàn toàn có thể khai báo như là `float d = 5;`. Mục đích mình làm việc đó chỉ là để tạo thói quen không để chương trình dịch phải ngầm hiểu gây mất kiểm soát.
-</div>
-
-#### Phép chia lấy dư
-
-- Phép chia lấy dư tức là lấy phần dư. Ví dụ như 5 chia 2 dư 1 thì `1` chính là kết quả.
-- Phép chia lấy dư có thể thực hiện trên số nguyên.
-
-```cpp
-int main()
-{
-	int i = 5;
-	cout << i % 2 << endl;
-	return EXIT_SUCCESS;
-}
-```
-Kết quả:
-```bash
-1
-```
-
-## Bitwise Operator
-
-Các phép toán _bitwise_ là các phép toán <mark>trực tiếp thao tác các bit của một số</mark>. Các phép toán bitwise hữu ích cho nhiều mục đích khác nhau, chẳng hạn như tối ưu hóa thuật toán, thực hiện một số phép tính nhất định và thao tác bộ nhớ trong các ngôn ngữ lập trình cấp thấp hơn như C và C++.
-
-Sau đây là tóm tắt nhanh về các phép toán bitwise phổ biến trong C++.
-
-### Các phép toán logic với bits
-
-#### AND (&)
-
-Phép toán bitwise AND ( &) là phép toán nhị phân lấy hai số, so sánh từng bit một và trả về một số mới trong đó mỗi bit được đặt (1) nếu các bit tương ứng trong cả hai số đầu vào được đặt (1); nếu không, bit sẽ không được đặt (0).
-
-|  A  |  B  | A & B |
-| :-: | :-: | :---: |
-|  0  |  0  |   0   |
-|  0  |  1  |   0   |
-|  1  |  0  |   0   |
-|  1  |  1  |   1   |
-
-Ví dụ:
-
-```c++
-int result = 5 & 3; // result will be 1 (0000 0101 & 0000 0011 = 0000 0001)
-```
-
-#### OR (|)
-
-Phép toán bitwise OR ( |) là phép toán nhị phân lấy hai số, so sánh từng bit một và trả về một số mới trong đó mỗi bit được đặt (1) nếu ít nhất một trong các bit tương ứng trong một trong hai số đầu vào được đặt (1); nếu không, bit sẽ không được đặt (0).
-
-|  A  |  B  | A\|B |
-| :-: | :-: | :--: |
-|  0  |  0  |  0   |
-|  0  |  1  |  1   |
-|  1  |  0  |  1   |
-|  1  |  1  |  1   |
-
-Ví dụ:
-
-```c++
-int result = 5 | 3; // result will be 7 (0000 0101 | 0000 0011 = 0000 0111
-```
-
-#### XOR (^)
-
-Phép toán bitwise XOR (OR loại trừ) ( ^) là phép toán nhị phân lấy hai số, so sánh từng bit một và trả về một số mới trong đó mỗi bit được đặt (1) nếu các bit tương ứng trong các số đầu vào khác nhau; nếu không, bit sẽ không được đặt (0).
-
-|  A  |  B  | A\|B |
-| :-: | :-: | :--: |
-|  0  |  0  |  0   |
-|  0  |  1  |  1   |
-|  1  |  0  |  1   |
-|  1  |  1  |  0   |
-
-Ví dụ:
-
-```cpp
-int result = 5 ^ 3; // result will be 6 (0000 0101 ^ 0000 0011 = 0000 0110)
-```
-
-#### NOT (~)
-
-Phép toán bitwise NOT (~) là phép toán đơn ngôi lấy một số duy nhất và trả về một số mới trong đó mỗi bit được đảo ngược (1 thành 0 và 0 thành 1).
-
-Ví dụ:
-
-```cpp
-int result = ~5; // result will be -6 (1111 1010)
-```
-
-### Dịch bit
-
-#### Dịch bit sang trái (<<)
-
-Phép dịch chuyển trái bitwise (`<<`) là phép toán nhị phân lấy hai số, một giá trị và một lượng dịch chuyển, và trả về một số mới bằng cách dịch chuyển các bit của giá trị sang trái theo lượng dịch chuyển đã chỉ định. Các bit bị bỏ trống được điền bằng số không.
-
-Ví dụ:
-
-```cpp
-int result = 5 << 1; // result will be 10 (0000 0101 << 1 = 0000 1010
-```
-
-#### Dịch bit sang phải (>>)
-
-Phép dịch chuyển bitwise sang phải (`>>`) là phép toán nhị phân lấy hai số, một giá trị và một lượng dịch chuyển, và trả về một số mới bằng cách dịch chuyển các bit của giá trị sang phải theo lượng dịch chuyển đã chỉ định. Các bit bị bỏ trống được điền bằng số không hoặc bit dấu tùy thuộc vào giá trị đầu vào có dấu hay không dấu.
-
-Ví dụ:
-
-```bash
-int result = 5 >> 1; // result will be 2 (0000 0101 >> 1 = 0000 0010)
-```
\ No newline at end of file
diff --git a/docs/Developer/cpp/cpp-datatypes.md b/docs/Developer/cpp/cpp-datatypes.md
deleted file mode 100644
index 018bdba..0000000
--- a/docs/Developer/cpp/cpp-datatypes.md
+++ /dev/null
@@ -1,223 +0,0 @@
-# Data Type (Kiểu Biến)
-
-## Primitive Data Types (Các loại biến cơ bản)
-
-### Định nghĩa
-
-- Các loại biến cơ bản bao gồm _bool_, _char_, _short_, _int_, _long_, _float_, _double_
-- Biến cơ bản nghĩa là các loại biến có sẵn _(không thông qua lớp gói ghém nào cả)_
-- Biến cơ bản thụ động, không có chức năng phụ gì cả.
-
-### Danh sách
-
-| Type   | 32–bit Size | 64–bit Size | Min                        | Max                       | Unsigned (Min=0)          |
-| :----- | :---------: | :---------: | :------------------------: | :-----------------------: | :-----------------------: |
-| bool   | 1 byte      | 1 byte      | NA                         | NA                        | NA                        |
-| char   | 1 byte      | 1 byte      | -128                       | 127                       | 255                       |
-| short  | 2 byte      | 2 byte      | -32768                     | 32767                     | 65535                     |
-| int    | 4 byte      | 4 byte      | -2147483648                | 2147483647                | 4294967295 = $2^{32}-1$   |
-| long   | 4 byte      | 8 byte      | (tự tính)                  | (tự tính)                 | (tự tính)                 |
-| float  | 4 byte      | 4 byte      | $-3.40282 \times 10^{38}$  | $3.40282 \times 10^{38}$  | TO_DO                     |
-| double | 8 byte      | 8 byte      | $−1,79769 \times 10^{308}$ | $1,79769 \times 10^{308}$ | TO_DO                     |
-
-### Integer (short, int)
-
-Số nguyên là các số toàn bộ có thể lưu trữ cả giá trị tích cực và âm. Kích thước của INT phụ thuộc vào kiến ​​trúc hệ thống (thường là 4 byte). Có các biến thể của int có thể chứa các phạm vi số khác nhau:
-
-```cpp
-int num = 42;
-```
-
-Có các biến thể của `int` có thể chứa các phạm vi số khác nhau:
-
-- `short` (`short int`): Phạm vi nhỏ hơn `int`.
-- `long` (`long int`): phạm vi lớn hơn `int`.
-- `long long` (`long int`): thậm chí phạm vi lớn hơn so với `long int`.
-
-
-Tập các số nguyên trong C++ có rất nhiều loại khác nhau như `short`, `int`, `long`, `long long`.
-
-#### Số nguyên dạng có dấu
-
-Về cơ bản nếu không có khai báo gì thêm thì số nguyên sẽ là __dạng số nguyên có dấu__.
-
-| Type        |  Size   |          Min           |          Max          | Max as bit `0xF..F` |
-| :---------- | :-----: | :--------------------: | :-------------------: | :-----------------: |
-| `short`     | 2 bytes |        `-32768`        |        `32767`        |        `-1`         |
-| `int`       | 4 bytes |     `-2147483648`      |     `2147483647`      |        `-1`         |
-| `long`      | 8 bytes |     `-2147483648`      |     `2147483647`      |        `-1`         |
-| `long long` | 8 bytes | `-9223372036854775808` | `9223372036854775807` |        `-1`         |
-
-#### Số nguyên không dấu
-
-Nếu là __dạng số nguyên không dấu__, cần thêm biến `unsigned`.
-
-| Type                 |  Size   | Min |          Max           |  Max as bit `0xF..F`   |
-| :------------------- | :-----: | :-: | :--------------------: | :--------------------: |
-| `unsigned short`     | 2 bytes | `0` |        `65535`         |        `65535`         |
-| `unsigned int`       | 4 bytes | `0` |      `4294967295`      |      `4294967295`      |
-| `unsigned long`      | 8 bytes | `0` |      `4294967295`      |      `4294967295`      |
-| `unsigned long long` | 8 bytes | `0` | `18446744073709551615` | `18446744073709551615` |
-
-### Floating-Point (float, double)
-
-Các loại ___floating-point___ đại diện cho các số thực, tức là, các số có điểm thập phân. Có hai loại ___floating-point___ chính:
-
-- `float`: __Float__ Cung cấp số dấu nổi chính xác đơn. Nó thường chiếm `4 bytes` bộ nhớ.
-    ```c++
-    float pi = 3.14f;
-    ```
-- `double`: __Double__ Cung cấp các số điểm nổi độ chính xác kép. Nó tiêu thụ nhiều bộ nhớ hơn (thường là `8 bytes`) nhưng có độ chính xác cao hơn `float`.
-    ```c++
-    double pi_high_precision = 3.1415926535;
-    ```
-### Character (char)
-
-Các ký tự đại diện cho một ký tự duy nhất, chẳng hạn như chữ cái, chữ số hoặc ký hiệu. Chúng được lưu trữ bằng cách sử dụng giá trị ASCII của biểu tượng và thường chiếm 1 byte bộ nhớ.
-
-```c++
-char letter = 'A';
-```
-
-### Boolean (bool)
-
-Booleans đại diện cho các giá trị logic: __Đúng__ (`true`) hoặc __Sai__ (`false`). bool thường chiếm 1 byte bộ nhớ.
-
-```c++
-bool is_cpp_great = true;
-```
-
-### Ví dụ các loại biến cơ bản
-
-Tổ hợp biến cơ bản của C++ gồm có:
-
-- `int`, `short`, `long`: số tự nhiên (bao gồm cả số âm)
-- `float` hoặc `double`: số thập phân, ví dụ như là 19.99 hoặc 19.99
-- `char` : ký tự, kiểu chữ cái đơn lẻ `a`, `b` hay `c` hoặc `+` ...
-- `bool` : giá trị logic đúng sai (`true`/`false`)
-
-Hãy thử
-```c++
-int main()
-{
-	int    i = 10;
-	float  f1 = 0.5;
-	double f2 = 1.5;
-	char   c = 'f';
-	std::cout << i << std::endl;
-	std::cout << f1 << std::endl;
-	std::cout << f2 << std::endl;
-	std::cout << c << std::endl;
-	return EXIT_SUCCESS;
-}
-```
-Kết quả:
-```bash
-10
-0.5
-1.5
-f
-```
-> `std::endl` để kết thúc công việc `cout` và xuống dòng.
-
-## Array - Chuỗi
-
-Chuỗi là một tập hợp có nhiều của biến, có thể là biến cơ bản hoặc không. Chuỗi được xác định bằng cách thêm `[]` đằng sau tên biến. Giữa hai dấu ngoặc sẽ là số lượng. Có thể không cần điền số lượng, nhưng để sử dụng nó tốt phải có kiến thức về con trỏ nên sẽ đề cập sau.
-
-Truy cập phần tử của chuỗi chỉ cần dùng `tên_biến[vị_trí]` với vị trí là số thứ tự của phần tử trong chuỗi, <mark>nhưng nó sẽ bắt đầu từ `0`, không phải `1`</mark>
-
-Xem ví dụ sau:
-```c++
-int main()
-{
-	int    i[5] = {1,2,3,4,5}; 
-	char   c[5] = {'H', 'e', 'l', 'l', 'o'};
-	string str = "Hello World";
-	cout << i[0] << endl; // Trả về số đầu tiên
-	cout << i[1] << endl; // Trả về số tiếp theo
-	cout << c[0] << c[1] << c[2] << c[3] << c[4] << endl; // Đầy đủ
-	cout << str << endl;  // Chuỗi ký tự
-	return EXIT_SUCCESS;
-}
-```
-Kết quả:
-```bash
-1
-2
-Hello
-Hello World
-```
-<div class="note-red">
-
-Bạn không thể gọi đến vị trí vượt quá giới hạn của chuỗi. Ví dụ như `i[6]`
-</div>
-
-### string
-
-- `string` về cơ bản là một chuỗi `char` đặc biệt được phát triển dành riêng cho ngôn ngữ `C++` cần thư viện __standard library c++__, cần sử dụng __std::string__. Mà thực tế là chả ai rảnh để viết từng ký tự cho một văn bản cả nên việc có nó là bắt buộc.
-- `string` được coi là một trong những dạng biến cơ bản bằt đầu từ `C++`. Nhưng về bản chất nó vẫn là một chuỗi những ký tự `char` nên mình để đây. Xung quanh `string` còn có rất nhiều thư viện vệ tinh hỗ trợ nên riêng kiểu biến này sẽ được tách ra làm một chương riêng.
-
-### Thay đổi biến
-
-Biến có thể được gắn lại cho giá trị khác sau khi khai báo, ví dụ:
-```c++
-int main() {
-    int i = 0;
-    i = 10; // Sau lần khai báo đầu tiên, không cần phải gọi lại int để định dạng kiểu biến.
-    cout << i << endl; // Kết quả là 10
-    return EXIT_SUCCESS;
-}
-```
-### Khai báo mở rộng
-
-Biến có thể được khai báo thêm một số ràng buộc điều kiện như:
-
-- `unsigned` : ràng buộc là số dương
-- `const` : không thể đổi
-
-```c++
-int main() {
-    unsigned int ui = -1; // Sẽ bị chuyển đổi
-    const int ci = 10;
-    // ci = 20; // Sẽ gây ra lỗi khi build
-    cout << ui << endl; // Kết quả là 10
-    return EXIT_SUCCESS;
-}
-```
-Kết quả:
-```bash
-4294967295
-```
-
-## Ép kiểu
-
-Biến có thể ép kiểu từ loại này sang loại khác. Ép kiểu cũng có 2 kiểu:
-
-- Ép kiểu an toàn là ép kiểu từ dữ liệu thấp lên cao hoặc bằng nhau.
-- Ép kiểu dữ liệu từ cao xuống thấp là không an toàn.
-
-Xem kích thước kiểu dữ liệu ở bảng [Danh sách]( #danh-sach), cụ thể là:
-
-- Ví dụ ép kiểu an toàn là từ _bool_, _char_, _..._, kiểu dữ liệu nhỏ thành _int_, _float_, _double_ là ép kiểu an toàn.
-- Ví dụ ép kiểu không an toàn là từ kích thước lớn như _int_, _float_, _double_, _..._ sang kiểu an toàn là _bool_, _char_, _..._
-
-```c++
-int main()
-{
-	int a = 2000000000;
-	short s0 = 97;
-
-	short s1 = a;
-	long  l = a;
-	char c = s0;
-	cout << s1 << endl; // Hight -> low
-	cout << l << endl;
-	cout << c << endl;
-	return EXIT_SUCCESS; 
-}
-```
-Kết quả:
-```bash
--27648
-2000000000
-```
diff --git a/docs/Developer/cpp/cpp-flow-control.md b/docs/Developer/cpp/cpp-flow-control.md
deleted file mode 100644
index 1ea359e..0000000
--- a/docs/Developer/cpp/cpp-flow-control.md
+++ /dev/null
@@ -1,88 +0,0 @@
-# Flow Control
-
-## if/else
-
-`if/else` đơn giản là kiểm tra đúng sai, luồng đơn giản như này:
-
-```plantuml
-@startuml
-if (condition?) is (true) then
-:does true;
-else (false)
-:does false;
-endif
-@enduml
-```
-
-Nếu `condition` _(điều kiện)_ là đúng thì sẽ thực hiện `[does true]`, còn lại sai thì là `[does false]`. Mã mẫu như sau:
-
-```cpp
-bool condition = true; // else false
-
-if(condition) {
-    // does true
-} else {
-    // does false
-}
-```
-## for
-
-`for` là vòng lặp, chạy 
-
-```cpp
-for(int i=0; i<10; ++i) {
-    std::cout << i << " ";
-}
-```
-
-Kết quả:
-
-```bash
-0 1 2 3 4 5 6 7 8 9
-```
-
-## while
-
-`while` nghĩa là vòng lặp có điều kiện:
-
-```bash
-int count = 0;
-
-while(count < 10) {
-    count = count + 1;
-}
-```
-```bash
-0 1 2 3 4 5 6 7 8 9
-```
-Dòng lệnh đó thực hiện như sau:
-- `count` khởi động với giá trị bằng `0`
-- Sau đó vì `count < 10`, điều kiện vẫn đúng nên sẽ thực hiện dòng lệnh trong dấu `{}`
-- Dòng lệnh `count = count + 1` là chính giá trị đó được tự tăng lên `1`.
-- Sau đó đến khi `count` đến `10` thì sẽ thoát vòng lặp
-
-## goto
-
-`goto` cần một _nhãn dán_ được đặt tên, hãy xem qua ví dụ dưới này:
-
-```cpp
-int main()
-{
-    int count = 0;
-
-    while(true) {
-        if(count > 10) {
-            goto example_label;
-        }
-        count = count + 1;
-    }
-example_label:
-    return 0;
-}
-```
-
-- Hàm này sẽ thực hiện gần như hàm ___while___ ở trên trừ một điểm, điều kiện là `true` tức là vòng lặp vô hạn.
-- Với điều kiện `(count > 10)` đoạn trong này sẽ không được thực hiện trong khi biến `count` còn nhỏ hơn `10`
-- Khi `count` tiến đến giá trị `10`, sẽ thực hiện đoạn mã `goto example_label;`
-- `goto example_label;` sẽ dẫn đến nhãn ___example_label___
-- Đoạn này sẽ thoát khỏi vòng lặp `while` và thoát ra khỏi chương trình.
\ No newline at end of file
diff --git a/docs/Developer/cpp/cpp-helloworld.md b/docs/Developer/cpp/cpp-helloworld.md
deleted file mode 100644
index 098874b..0000000
--- a/docs/Developer/cpp/cpp-helloworld.md
+++ /dev/null
@@ -1,38 +0,0 @@
-# HelloWorld
-
-## Nội dung
-
-Chương trình cơ bản đầu tiên của C++ được viết như này.
-
-```cpp title="main.cpp"
-#include "stdio.h"
-
-int main() {
-    printf("Hello World!");
-    return 0;
-}
-```
-
-## Chạy thử trên Windows
-
-Sau đó có thể dùng MSYS2 để biên dịch:
-
-```bash
-
-```
-
-và chạy
-
-```bash
-
-```
-
-## Chạy thử trên Linux
-
-Nếu sử  dụng Ubuntu hoặc Linux thì mọi chuyện đơn giản hơn, trực tiếp bằng `g++` trên Linux
-
-```bash
-
-```
-
-Sau đó chạy
\ No newline at end of file
diff --git a/docs/Developer/cpp/cpp-install.md b/docs/Developer/cpp/cpp-install.md
deleted file mode 100644
index 8f30ff8..0000000
--- a/docs/Developer/cpp/cpp-install.md
+++ /dev/null
@@ -1,63 +0,0 @@
-# Tải về và cài đặt
-
-## Cài đặt cho Windows
-
-Cho Windows có nhiều cách để sử dụng như tải về và công cụ sẵn có như:
-- [Code::Blocks](https://www.codeblocks.org/)
-- [Dev-C++](https://www.bloodshed.net/), ...
-
-Nhưng tôi nghĩ tốt nhất nên dùng `msys2` vì nó có vẻ được khuyến nghị bởi [Visual Studio Code](../../Software/vscode.md).
-
-1. Tải msys và cài đặt từ trang chủ [MSYS2](https://www.msys2.org/)
-1. Sau đó tải [VSCode]() để code C++
-1. Theo hướng dẫn trong này [Using GCC with MinGW](https://code.visualstudio.com/docs/cpp/config-mingw) để tải về 
-1. Sau khi tải sẽ có:
-    - `x86_64-w64-mingw32-g++.exe`
-    - `x86_64-w64-mingw32-g++.exe`
-    Dùng để build ứng dụng trên Windows.
-
-Để kiểm tra dùng:
-
-```bash
-x86_64-w64-mingw32-g++.exe --version
-```
-
-Sẽ có kểt quả về phiên bản `g++` đang được dùng.
-
-```bash
-x86_64-w64-mingw32-g++ (GCC) 14.2.0
-Copyright (C) 2024 Free Software Foundation, Inc.
-This is free software; see the source for copying conditions.  There is NO
-warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-```
-
-Khi cài đặt thông thường, các phiên bản `g++` sẽ thường nằm ở `C:\msys64\mingw32\bin` hoặc `C:\msys64\mingw64\bin`. Bình thường sẽ không thể dùng trực tiếp, muốn sử dụng trên cmd cần phải thêm đường dẫn vào `PATH`.
-
-## Cài đặt cho Linux/Ubuntu
-
-- Tải về `g++`
-
-```cpp
-sudo apt-get update
-sudo apt-get install g++
-```
-
-- Kiểm tra _binary_
-
-```cpp
-$ which c++
-/usr/bin/g++
-```
-
-- Kiểm tra số hiệu phiên bản
-
-```bash
-$ g++ --version
-g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
-Copyright (C) 2021 Free Software Foundation, Inc.
-This is free software; see the source for copying conditions.  There is NO
-warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-```
-## Cài đặt cho IOS
-
-_Chưa có tiền mua máy Mac_
\ No newline at end of file
diff --git a/docs/Developer/cpp/cpp-overview.md b/docs/Developer/cpp/cpp-overview.md
deleted file mode 100644
index 8496f97..0000000
--- a/docs/Developer/cpp/cpp-overview.md
+++ /dev/null
@@ -1,23 +0,0 @@
-# Overview
-
-## C++ Overview
-
-1. C++ is a _cross-platform language_(<mark>ngôn ngữ đa nền tảng</mark>), hiệu suất cao.
-1. C++ được phát triển bởi __Bjarne Stroustrup__ như là phần mở rộng của ngôn ngữ C
-1. C++ cho lập trình viên <mark>khả năng quản lý tài nguyên và bộ nhớ rất mạnh mẽ</mark>.
-
-> - Phiên bản thường được dùng nhất là C++11
-> - Phiên bản mới nhất nhất hiện có là C++20
-
-## Tại sao nên học C++?
-
-### Điểm mạnh
-- Phổ biến
-- Nhanh
-- Đem lại kiến thức tốt về tài nguyên máy tính
-- Ngôn ngữ tốt nhất để 
-- Hỗ trợ đa nền tảng
-### Điểm Yếu
-- Khó thành thạo.
-- Khó học và cần rất nhiều kiến thức, nếu không sẽ tạo ra rất nhiều mã xấu.
-- Mặc dù hỗ trợ đa nền tảng nhưng càn có trình biên dịch hỗ trợ, C++ không thực sự làm tốt việc này.
\ No newline at end of file
diff --git a/docs/index.md b/docs/index.md
index 8c3aaf7..eca78fa 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,4 +10,12 @@ Học ngôn ngữ lập trình.
 
 Học một số ngôn ngữ thiết kế website, viết tài liệu, 
 
+## [OS (Operator System)](OS/os-overview/)
 
+Các phần về hệ điều hành như Ubuntu, Windows, Android, ...
+
+## [Software]()
+
+## Work
+
+## Research
\ No newline at end of file
diff --git a/docs/stylesheets/theme.css b/docs/stylesheets/theme.css
index 36fb8db..1c36ec7 100644
--- a/docs/stylesheets/theme.css
+++ b/docs/stylesheets/theme.css
@@ -15,12 +15,22 @@
     --code-color: black;
     --code-background-color: #fdddb4aa;
     --code-font-family: 'Roboto Mono Medium';
+    --md-bg-light-color: #d3d3e9;
+    --md-bg-dark-color: #020226;
     /* --code-font-family: 'Noto Sans Mono Light'; */
 }
 
+[data-md-color-primary=indigo] {
+    --md-primary-fg-color: #383d5b;
+}
 /* Full width */
 .md-grid {
-  max-width: 60%; /* or try 100% or 1280px */
+  /* max-width: initial; /* or try 100% or 1280px or */
+  max-width: 80%; /* or try 100% or 1280px or */
+}
+
+.md-tabs {
+  background-color: #434a74;
 }
 
 body {
@@ -32,6 +42,30 @@ h1 {
     text-align: center;
 }
 
+h2 {
+    font-weight: bold;
+    color:var(--primary-theme-color-transparent);
+}
+h3 {
+    font-weight: bold;
+    color:var(--secondary-theme-color);
+}
+h4 {
+    font-weight: bold;
+    font-style    : italic;
+    color:var(--secondary-theme-color);
+}
+h5 {
+    font-weight: bold;
+    font-style    : italic;
+    color:var(--secondary-theme-color);
+}
+h6 {
+    font-weight: bold;
+    font-style    : italic;
+    color:var(--secondary-theme-color);
+}
+
 mark.green {
     background-color: #00ff22!important;
 }
@@ -43,49 +77,6 @@ mark.blue {
     background-color: lightblue!important;
 }
 
-div.note-red {
-  color: white;
-  background-color: #ff1100;
-  padding-left: var(--primary-font-size);;
-  padding-top: var(--primary-padding-common);
-  padding-bottom: var(--primary-padding-common);
-  font-style: italic;
-}
-div.note-yellow {
-  color: black;
-  background-color: #ffffcc;
-  border-left: 6px solid #fbff00;
-  padding-left: var(--primary-font-size);;
-  padding-top: var(--primary-padding-common);
-  padding-bottom: var(--primary-padding-common);
-  font-style: italic;
-}
-div.note-blue {
-  color: black;
-  background-color: #63b9ff;
-  padding-left: var(--primary-font-size);;
-  padding-top: var(--primary-padding-common);
-  padding-bottom: var(--primary-padding-common);
-  font-style: italic;
-}
-div.note-green {
-  color: black;
-  background-color: #00ff22;
-  padding-left: var(--primary-font-size);;
-  padding-top: var(--primary-padding-common);
-  padding-bottom: var(--primary-padding-common);
-  font-style: italic;
-}
-/* This isn't have italic font */
-div.note-gray {
-  color: black;
-  background-color: #808080;
-  padding-left: var(--primary-font-size);
-  padding-top: var(--primary-padding-common);
-  padding-bottom: var(--primary-padding-common);
-  font-style: italic;
-}
-
 .center-table {
   display: flex;
   justify-content: center;
@@ -105,4 +96,11 @@ th {
 
 td {
   font-size: large;
+}
+
+/* code */
+:not(pre):not(.hljs) > code {
+    color: var(--code-color);
+    background-color: var(--code-background-color);
+    font-family: var(--code-font-family);
 }
\ No newline at end of file
diff --git a/mkdocs.yml b/mkdocs.yml
index de05417..aa483cf 100644
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@ -1,6 +1,7 @@
-site_name: Tad
+site_name: Tad Zeila
 theme:
   name: material
+  logo: logo/cat_white.png
   highlightjs: true
   hljs_style: github
   hljs_style_dark: github-dark
@@ -20,10 +21,16 @@ theme:
   features:
     - content.code.annotation
     - content.code.copy
+    - content.tabs.link
     - navigation.tabs
+    - navigation.instant
+
 
 plugins:
   - search
+  - plantuml:
+      puml_url: https://www.plantuml.com/plantuml/
+      num_workers: 8
 
 nav:
   - Home: index.md
@@ -31,16 +38,45 @@ nav:
     - C: Developer/c/c.md
     - C++:
       - Giới thiệu:
-        - Overview: Developer/cpp/cpp-overview.md
-        - Install: Developer/cpp/cpp-install.md
-        - HelloWorld: Developer/cpp/cpp-helloworld.md
+        - Overview: Developer/cpp/cpp-0-overview.md
+        - Install: Developer/cpp/cpp-0-install.md
+        - HelloWorld: Developer/cpp/cpp-0-helloworld.md
       - Cơ bản:
-        - Data Types: Developer/cpp/cpp-datatypes.md
-        - Basic Operator: Developer/cpp/cpp-basic-operator.md
-        - Flow Control: Developer/cpp/cpp-flow-control.md
+        - Data Types: Developer/cpp/cpp-1-datatypes.md
+        - Basic Operator: Developer/cpp/cpp-1-basic-operator.md
+        - Flow Control: Developer/cpp/cpp-1-flow-control.md
+        - Input and Output: Developer/cpp/cpp-1-input-and-output.md
+        - Condition & Loop: Developer/cpp/cpp-1-condition-loop.md
+        - Command Line Arguments: Developer/cpp/cpp-1-command-line-arguments.md
+        - Basic Bit Operator: Developer/cpp/cpp-1-bit-operator.md
+        - Namespace: Developer/cpp/cpp-1-namespace.md
+        - Define: Developer/cpp/cpp-1-define.md
+        - Include: Developer/cpp/cpp-1-include.md
+      - Function:
+        - Function: Developer/cpp/cpp-2-function.md
+        - Lambda: Developer/cpp/cpp-2-lambda.md
+        - Function as Parameter: Developer/cpp/cpp-2-function-as-parameter.md
+      - Pointer:
+        - Pointer: Developer/cpp/cpp-3-pointer.md
+        - Smart Pointer: Developer/cpp/cpp-3-smart-pointer.md
+        - Raw Pointer: Developer/cpp/cpp-3-raw-pointer.md
+        - Memory Model: Developer/cpp/cpp-3-memory-model.md
+      - STANDARD LIBRARY STD:
+        - Type:
+          - std::string: Developer/cpp/cpp-3-std-string.md
+        - Function:
+          - std::sort: Developer/cpp/cpp-3-std-sort.md
+          - std::make_share: Developer/cpp/cpp-3-std-make_share.md
+          - std::distance: Developer/cpp/cpp-3-std-distance.md
+          - std::hash: Developer/cpp/cpp-3-std-hash.md
+          - std::unique: Developer/cpp/cpp-3-std-unique.md
+      - Project:
+        - Giải bảng Sudoku:  Developer/cpp/cpp-project-solver-sudoku.md
     - C#: Developer/c-sharp/c-sharp.md
-    - Java: Developer/Java/java.md
-    - Javascript: Developer/Javascript/javascript
+    - Java:
+      - Java: Developer/Java/java-introduce.md
+      - JDK, JRE và JVM: Developer/Java/java-jdk-jre-jvm.md
+    - Javascript: Developer/Javascript/javascript.md
     - Kotlin: Developer/Kotlin/kotlin.md
     - Python: Developer/Python/python.md
     - Rust: Developer/Rust/rust.md
@@ -59,8 +95,69 @@ nav:
         - Theme: Document/MKDocs/mkdocs-theme.md
         - CSS: Document/MKDocs/mkdocs-css.md
         - Katex: Document/MKDocs/mkdocs-katex.md
+        - Mermaid: Document/MKDocs/mkdocs-mermaid.md
+        - PlantUml: Document/MKDocs/mkdocs-plantuml.md
+        - Markdown Extensions: Document/MKDocs/mkdocs-markdown-extensions.md
+  - Tools:
+    - VSCode: Tools/VSCode/tools-vscode-overview.md
+    - Android Studio: Tools/AndroidStudio/tools-android-studio-overview.md
+    - Git:
+      - About Git: Tools/Git/tools-git-about.md
+      - Install: Tools/Git/tools-git-install.md
+      - Git Config: Tools/Git/tools-git-config.md
+    - Github:
+      - Github Overview: Tools/Github/tools-github-overview.md
+      - Github Start: Tools/Github/tools-github-start.md
+      - Github Page: Tools/Github/tools-github-page.md
+  - Operator System:
+    - OS Overview: OS/os-overview.md
+    - Common:
+      - File System: OS/os-file-system.md
+    - Ubuntu:
+      - Overview & Install: OS/Ubuntu/os-ubuntu-family-overview-and-install.md
+      - Install: OS/Ubuntu/os-ubuntu-install.md
+      - System:
+        - Folder Hierarch: OS/Ubuntu/os-ubuntu-system-folder-hierarch.md
+        - System File: OS/Ubuntu/os-ubuntu-system-file.md
+        - File: OS/Ubuntu/os-ubuntu-file.md
+    - Windows:
+      - Overview: OS/Windows/os-windows-overview.md
+      - System:
+        - Macro PATH: OS/Windows/os-windows-common-path.md
+        - Environment Variables: OS/Windows/os-windows-environment-variables.md
+        - Startup Process: OS/Windows/os-windows-startup-process.md
+        - Run: OS/Windows/os-windows-run.md
+        - Service Tag and Manufacture: OS/Windows/os-windows-service-tag-and-manufacture.md
+      - Network: OS/Windows/os-windows-network.md
+      - Tools:
+        - Putty: OS/Windows/os-windows-tools-putty.md
+      - Shell:
+        - Command Prompt:
+          - Getting Start: OS/Windows/os-windows-cmd-getting-start.md
+          - CMD Call: OS/Windows/os-windows-cmd-executed.md
+          - CMD Script: OS/Windows/os-windows-cmd-write.md
+        - Power Shell:
+          - Command Prompt: OS/Windows/os-windows-cmd-command-prompt.md
+      - Custom:
+        - Usercmd: OS/Windows/os-windows-custom-usercmd.md
+    - Android:
+      - Overview: OS/Android/os-android-overview.md
   - Work:
     - MnM:
+      - Về MnM: Work/MnM/work-about-mnm.md
+      - S201:
+        - Overview: Work/MnM/work-s201-overview.md
+      - W501:
+        - Overview: Work/MnM/work-w501-overview.md
+      - Z101:
+        - Overview: Work/MnM/work-z101-overview.md
+      - S210:
+        - Overview: Work/MnM/work-s210-overview.md
+      - WSA:
+        - Overview: Work/MnM/work-wsa-overview.md
+      - ZX:
+        - Overview: Work/MnM/work-zx-overview.md
+
 extra_css:
   - stylesheets/theme.css
   - https://unpkg.com/katex@0/dist/katex.min.css
@@ -75,6 +172,11 @@ markdown_extensions:
         - name: mermaid
           class: mermaid
           format: !!python/name:pymdownx.superfences.fence_code_format
+  - pymdownx.tabbed:
+      alternate_style: true
+  - admonition
+  - pymdownx.details
+
 extra_javascript:
   - scripts/katex.js
   - https://unpkg.com/katex@0/dist/katex.min.js
